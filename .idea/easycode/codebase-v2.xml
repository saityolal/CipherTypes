<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/DESCipher/DesCipherDecryption.java;C:/Users/sado/Desktop/software optimization/software optimization/src/DESCipher/DesCipherEncryption.java;C:/Users/sado/Desktop/software optimization/software optimization/src/MonoalphabeticalCipher/MonoalphabeticCipherDecryptionTurkish.java;C:/Users/sado/Desktop/software optimization/software optimization/src/MonoalphabeticalCipher/MonoalphabeticCipherDecyrption.java;C:/Users/sado/Desktop/software optimization/software optimization/src/MonoalphabeticalCipher/MonoalphabeticCipherEncryptionTurkish.java;C:/Users/sado/Desktop/software optimization/software optimization/src/MonoalphabeticalCipher/MonoalphabeticCipherEncyrption.java;C:/Users/sado/Desktop/software optimization/software optimization/src/MonoalphabeticalCipher/OscarTheHacker.java;C:/Users/sado/Desktop/software optimization/software optimization/src/MonoalphabeticalCipher/OscarTheHackerTurkish.java;C:/Users/sado/Desktop/software optimization/software optimization/src/PolyalphabeticalCipher/PolyalphabeticCipherDecryption.java;C:/Users/sado/Desktop/software optimization/software optimization/src/PolyalphabeticalCipher/PolyalphabeticCipherDecryptionTurkish.java;C:/Users/sado/Desktop/software optimization/software optimization/src/PolyalphabeticalCipher/PolyalphabeticCipherEncryption.java;C:/Users/sado/Desktop/software optimization/software optimization/src/PolyalphabeticalCipher/PolyalphabeticCipherEncryptionTurkish.java;C:/Users/sado/Desktop/software optimization/software optimization/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/sado/Desktop/software optimization/software optimization&quot;:&quot;{\&quot;/src/MonoalphabeticalCipher/MonoalphabeticCipherEncryptionTurkish.java\&quot;:\&quot;This Java file implements a monoalphabetic cipher encryption for Turkish text.\\n\\nThe key functions are:\\n\\n- main(): The main method that runs the encryption process.\\n\\n- Random key generation: Generates a random number between 0-27 to use as the encryption key. \\n\\n- Turkish alphabet array: Defines the Turkish alphabet characters to use for mapping.\\n\\n- Encryption loop: Loops through each character of the input text:\\n\\n  - Checks if it\\u0027s a letter and gets its index in the alphabet array\\n\\n  - Encrypts it by shifting the index by the key modulo 29 (size of alphabet)\\n\\n  - Appends to the encrypted output string\\n\\n- File I/O:\\n\\n  - Reads the input plaintext from a file\\n\\n  - Writes the encrypted ciphertext to an output file\\n\\nSo in summary, it implements a basic monoalphabetic cipher by shifting the Turkish alphabet based on a random key. This encrypts a given plaintext Turkish text and outputs the result to a file.\&quot;,\&quot;/src/DESCipher/DesCipherDecryption.java\&quot;:\&quot;This Java file implements DES cipher decryption functionality.\\n\\nKey functions it likely contains:\\n\\n- decrypt(byte[] ciphertext, byte[] key) - Main decryption function that takes encrypted ciphertext and decryption key and returns plaintext.\\n\\n- expandKey(byte[] key) - Function to expand the user-supplied decryption key into multiple subkeys used in the DES algorithm rounds. \\n\\n- desFunction(byte[] block, byte[] subkey) - Implements the core DES algorithm decryption round function that takes a ciphertext block and subkey and performs permutations/substitutions.\\n\\n- inverseInitialPermutation(byte[] block) - Undoes the initial permutation that was applied during encryption. \\n\\n- swapBits(byte[] block, int i, int j) - Helper function to swap bits within a byte array representing the ciphertext block as required by the DES algorithm decryption process.\\n\\n- byteSubstitutionBox(byte[] block) - Implements the DES S-boxes lookups to decrypt substituted ciphertext bytes back to plaintext.\\n\\nSo in summary, it provides an implementation of the DES decryption cipher algorithm to decrypt ciphertext that was previously encrypted using DES and the same decryption key.\&quot;,\&quot;/src/MonoalphabeticalCipher/MonoalphabeticCipherDecryptionTurkish.java\&quot;:\&quot;This Java file implements decryption of a monoalphabetic cipher with a Turkish alphabet.\\n\\nThe key functions are:\\n\\n- Main method:\\n  - Prompts user for decryption key\\n  - Opens encrypted input and decrypted output files\\n\\n- Decryption loop:\\n  - Loops through each character in encrypted text\\n  - Finds index of character in Turkish alphabet\\n  - Subtracts decryption key from index\\n  - Wraps index if it goes out of bounds\\n  - Gets character at new index and adds to decrypted string\\n\\n- I/O handling:\\n  - Reads encrypted text file into string\\n  - Writes decrypted text to output file\\n\\nSo in summary, it:\\n\\n1. Gets decryption key from user\\n2. Reads encrypted text file \\n3. Loops through each character\\n4. Decrypts using Turkish alphabet and key\\n5. Writes decrypted text to output file\\n\\nThe key aspects are using the Turkish alphabet for indexing during decryption, and wrapping the index if it goes out of bounds due to the decryption key.\&quot;,\&quot;/src/MonoalphabeticalCipher/MonoalphabeticCipherEncyrption.java\&quot;:\&quot;This Java file implements a monoalphabetic cipher encryption:\\n\\n- It generates a random key between 1-25.\\n\\n- It defines the alphabet as an array of characters. \\n\\n- It reads the plaintext from an input file (\\\&quot;Alice Message.txt\\\&quot;) and writes the encrypted text to an output file (\\\&quot;Encrypted Message.txt\\\&quot;).\\n\\n- While reading each character from the input file:\\n\\n  - It converts the character to lowercase\\n\\n  - It finds the index of the character in the alphabet array\\n\\n  - It calculates the new index by adding the key to the original index modulo 26\\n\\n  - It gets the character at the new index which is the encrypted character\\n\\n  - It appends the encrypted character to a StringBuffer\\n\\n  - It writes the full encrypted text to the output file\\n\\nKey functions:\\n\\n- main() - The main method that runs the encryption process\\n- Random random \\u003d new Random() - Generates a random key\\n- FileInputStream/FileOutputStream - Used to read from input file and write to output file\\n- Character encryption logic - Finds index, adds key, gets new character\\n\\nSo in summary, it implements a basic monoalphabetic cipher to encrypt a plaintext message using a random key.\&quot;,\&quot;/src/MonoalphabeticalCipher/OscarTheHacker.java\&quot;:\&quot;This Java file contains code to decrypt a monoalphabetic cipher.\\n\\nThe key functions are:\\n\\n- main() - The main entry point of the program. It reads the encrypted text file, analyzes it to estimate possible keys, and calls decrypt_message() multiple times with different keys.\\n\\n- decrypt_message(int key) - Takes the estimated key as a parameter. It decrypts the encrypted text by shifting each character back by the key in the alphabet. It writes the decrypted text to a file. \\n\\n- It counts the frequency of each letter in the encrypted text to analyze which letters are most common. Based on letter frequency analysis in English, it estimates possible keys by seeing which letters the most common ciphertexts could decrypt to (e, t, a).\\n\\n- It uses a Caesar cipher approach to decryption - shifting each ciphertext letter back in the alphabet by the key amount. Letters wrapping around from z to a.\\n\\nSo in summary, it performs frequency analysis on the ciphertext, estimates possible keys, and systematically decrypts the text with different keys to try and reveal the original plaintext.\&quot;,\&quot;/src/PolyalphabeticalCipher/PolyalphabeticCipherDecryptionTurkish.java\&quot;:\&quot;This Java file implements decryption of a polyalphabetic cipher with a Turkish alphabet.\\n\\nKey functions:\\n\\n- main(): The main method that runs the decryption process. It reads the encrypted text file, key file, decrypts the text and writes the decrypted text to a new file.\\n\\n- indexOfChar(): Helper method that returns the index of a character in the alphabet array. Used to map characters during encryption/decryption. \\n\\n- PolyalphabeticDecryption(): The main decryption logic. Takes the encrypted text and key as strings. Loops through each character, calculates the decryption index based on the key character at that position, looks up the decrypted character in the alphabet and appends to the decrypted string.\\n\\n- The alphabet array defines the Turkish alphabet including special characters like ç, ğ, ı, ö, ş, ü. \\n\\n- It reads the encrypted text and key from files, decrypts the text using the PolyalphabeticDecryption method and key, and writes the decrypted text to a new output file.\\n\\nSo in summary, it implements decryption of a polyalphabetic cipher with a Turkish-specific alphabet by mapping characters during encryption/decryption based on a key string.\&quot;,\&quot;/src/MonoalphabeticalCipher/OscarTheHackerTurkish.java\&quot;:\&quot;This Java file contains code to perform a monoalphabetic cipher decryption on an encrypted Turkish text file using frequency analysis.\\n\\nThe key functions are:\\n\\n- main(): The main entry point of the program. It reads the encrypted text, analyzes character frequencies, estimates possible keys based on most frequent letters in Turkish, and decrypts the text using those keys.\\n\\n- decrypt_message(): Takes the encrypted text and a key as input and decrypts the text using a Caesar cipher with the given key. Prints the decrypted text.\\n\\n- indexOfChar(): Helper function that returns the index of a target character in a character array. Used to lookup character positions in the alphabet for encryption/decryption. \\n\\n- It analyzes character frequencies in the encrypted text to determine the most frequent character. \\n\\n- It estimates possible cipher keys by calculating the offset between the most frequent character\\u0027s position and the most common letters in Turkish.\\n\\n- It decrypts the text multiple times using the estimated keys, trying different keys to find one that yields coherent decrypted text.\\n\\nSo in summary, it performs a basic frequency analysis cryptanalysis on a monoalphabetically encrypted Turkish text to crack the cipher without knowing the key.\&quot;,\&quot;/src/DESCipher/DesCipherEncryption.java\&quot;:\&quot;This Java file implements the DES (Data Encryption Standard) cipher for encryption.\\n\\nKey functions:\\n\\n- main(): The entry point of the program. It reads plaintext from a file, splits it into 8-bit characters, performs initial permutation and key generation.\\n\\n- leftCircularShiftBy1()/leftCircularShiftBy2(): Functions to perform left circular shifts on the key for different rounds. \\n\\n- permuteChoice1()/permuteChoice2(): Functions to perform permutations on the key according to DES specification.\\n\\n- get_bits(): Converts each character to its 8-bit binary representation. \\n\\n- key_generator(): Generates a random 64-bit key. \\n\\n- initial_permutation(): Performs initial permutation on the plaintext blocks according to DES specification. \\n\\n- expansion_permutation(): Performs expansion permutation on the ciphertext half.\\n\\n- key_substitution(): Implements the S-boxes for key substitution step.\\n\\n- Inverse_initial_permutation(): Performs inverse initial permutation.\\n\\nSo in summary, it implements the key aspects of DES encryption - initial and final permutations, key schedule with circular shifts, expansion and S-box substitutions. It takes plaintext, generates a random key and performs the DES rounds to encrypt the text.\&quot;,\&quot;/src/MonoalphabeticalCipher/MonoalphabeticCipherDecyrption.java\&quot;:\&quot;This Java file implements decryption of a monoalphabetic cipher.\\n\\nThe key functions are:\\n\\n- main() - The main method that runs the program\\n- Takes user input for the decryption key\\n- Defines the alphabet array \\n- Opens input and output files for reading encrypted text and writing decrypted text\\n- Reads each character from the encrypted file\\n- Loops through the alphabet to find the index of the encrypted character\\n- Calculates the index of the decrypted character based on the key\\n- Writes the decrypted character to the output file\\n- Closes all file streams when done\\n\\nIt decrypts a text file (\\\&quot;Encrypted Message.txt\\\&quot;) that was encrypted with a monoalphabetic cipher, using a key provided by the user. It reads each encrypted character, decrypts it by shifting the alphabet index based on the key, and writes the decrypted text to an output file (\\\&quot;Decrypted Message.txt\\\&quot;).\\n\\nThe key functions are taking the encryption key from user input, reading the encrypted file, decrypting each character based on the key, and writing the decrypted text to the output file.\&quot;,\&quot;/src/PolyalphabeticalCipher/PolyalphabeticCipherDecryption.java\&quot;:\&quot;This Java file implements decryption of a polyalphabetic cipher.\\n\\nThe key functions are:\\n\\n- main(): The main entry point of the program. It reads the encrypted text and key from files, decrypts the text, and writes the decrypted text to a new file.\\n\\n- indexOfChar(): Helper function that returns the index of a character in the alphabet array. Used to map characters to numbers. \\n\\n- PolyalphabeticDecryption(): The main decryption logic. It takes the encrypted text and key as strings. For each character in the text:\\n  - Finds the index of the character in the alphabet\\n  - Finds the index of the key character in the alphabet\\n  - Calculates the decrypted index as (text_index - key_index + 26) % 26 \\n  - Maps the decrypted index back to a character\\n  - Appends it to the decrypted string\\n\\n- It decrypts the text by shifting each character by the key character amount, wrapping around the alphabet. This implements the basic logic of a polyalphabetic cipher decryption.\\n\\nSo in summary, it reads an encrypted polyalphabetic cipher text and key, decrypts the text using the key, and writes the decrypted plaintext to a new file.\&quot;,\&quot;/src/PolyalphabeticalCipher/PolyalphabeticCipherEncryptionTurkish.java\&quot;:\&quot;This Java file implements a polyalphabetic cipher encryption for Turkish text.\\n\\nThe key functions are:\\n\\n- main(): The main method that runs the encryption process. It reads plaintext from a file, generates a random key, encrypts the text, and writes the encrypted text and key to output files.\\n\\n- indexOfChar(): Helper method to get the index of a character in the alphabet array.\\n\\n- PolyalphabeticEncryption(): The main encryption method. It takes the plaintext, key and encrypts each character by shifting its index based on the key character at that position. \\n\\n- Key_Generator(): Generates a random key string of the same length as plaintext. Not used in this implementation.\\n\\nThe encryption process:\\n\\n1. Reads plaintext from a file\\n2. Generates a random key string \\n3. Encrypts each character by shifting its alphabet index based on the key character\\n4. Writes encrypted text and key to output files\\n\\nIt implements a basic polyalphabetic cipher for Turkish text, handling Turkish characters like ç, ğ, ı, ö, ş in the encryption.\&quot;,\&quot;/README.md\&quot;:\&quot;This README.md file provides documentation and instructions for using VS Code for Java development.\\n\\nThe key functions of this file are:\\n\\n- Explains the default folder structure used for the Java project, including src, lib, and bin folders.\\n\\n- Mentions that the folder structure can be customized by editing the settings.json file. \\n\\n- Introduces the \\\&quot;JAVA PROJECTS\\\&quot; view in VS Code which allows managing dependencies. \\n\\n- Provides a link to more documentation on using the Java dependency management features.\\n\\n- Gives a brief \\\&quot;Getting Started\\\&quot; introduction to help new users set up and start writing Java code in VS Code.\\n\\n- Documents the purpose and contents of the workspace, including the src and lib folders. \\n\\nSo in summary, this README file serves as documentation and a getting started guide for developers to understand the project structure, dependencies, and how to use VS Code for Java development. It introduces the key functionality and configuration.\&quot;,\&quot;/src/PolyalphabeticalCipher/PolyalphabeticCipherEncryption.java\&quot;:\&quot;This Java file implements encryption using a polyalphabetic cipher (also known as a multi-alphabet cipher).\\n\\nThe key functions are:\\n\\n- main(): The main method that runs the encryption process. It reads in a plaintext file, generates a random key, encrypts the text, and writes the encrypted text and key to output files.\\n\\n- indexOfChar(): Helper method that returns the index of a character in the alphabet array. Used to map characters to integers for the cipher.\\n\\n- PolyalphabeticEncryption(): The main encryption method. Takes the plaintext and key as strings, iterates through each character, calculates the encrypted character using the cipher formula, and appends to the encrypted output string. \\n\\n- Key_Generator(): Generates a random key string by selecting random characters from the alphabet array. Not currently used but was likely an earlier implementation.\\n\\nThe key steps are:\\n\\n1. Read plaintext from file into a StringBuffer \\n2. Generate a random key string \\n3. For each character:\\n   - Map to integer index using alphabet array\\n   - Calculate encrypted index using cipher formula\\n   - Map encrypted index back to character\\n   - Append to encrypted output\\n4. Write encrypted text and key to output files\\n\\nSo in summary, it implements a polyalphabetic cipher to encrypt plaintext using a randomly generated key, and writes the results to output files.\&quot;}&quot;}" />
  </component>
</project>